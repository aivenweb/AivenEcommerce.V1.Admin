@page "/couponcodes/{Code}"
@inject IProductService ProductService
@inject IProductCategoryService ProductCategoryService
@inject ICouponCodeService CouponCodeService
@inject IJSRuntime JSRuntime
@inject ICustomerService CustomerService
@inject AlertComponentService AlertService
@inject NavigationManager NavigationManager

<div class="main-content container-fluid">
    @if (couponCode is not null)
    {
        <div class="page-title">
            <h3>@Code <NavLink href="@($"/couponcodes/{Code}/edit/")" class="btn icon btn-outline-primary"><i data-feather="edit"></i></NavLink></h3>
        </div>


        <section class="section">
            <div class="row mb-4">
                <div class="col-md-4">
                    <div class="card ">
                        <div class="card-header">
                            <h4>Cupón</h4>
                        </div>
                        <div class="card-body">
                            <table class='table table-borderless'>
                                <tr>
                                    <td class="text-bold-500">Tipo</td>
                                    @switch (couponCode.Type)
                                    {
                                        case CouponCodeOffType.Percentage:
                                            <td class="text-bold-500">Porcentaje</td>
                                            break;
                                        case CouponCodeOffType.SpecificAmount:
                                            <td class="text-bold-500">Monto</td>
                                            break;
                                        default:
                                            break;
                                    }
                                </tr>
                                <tr>
                                    <td class="text-bold-500">Valor</td>
                                    @switch (couponCode.Type)
                                    {
                                        case CouponCodeOffType.Percentage:
                                            <td class="text-bold-500">% @couponCode.Value</td>
                                            break;
                                        case CouponCodeOffType.SpecificAmount:
                                            <td class="text-bold-500">$ @couponCode.Value</td>
                                            break;
                                        default:
                                            break;
                                    }
                                </tr>
                            </table>
                        </div>
                    </div>
                    <div class="card ">
                        <div class="card-header">
                            <h4>Min/Max</h4>
                        </div>
                        <div class="card-body">
                            <table class='table table-borderless'>
                                <tr>
                                    <td class="text-bold-500">Monto Minimo</td>
                                    <td class="text-bold-500">$ @couponCode.MinAmount</td>
                                </tr>
                                <tr>
                                    <td class="text-bold-500">Monto Máximo</td>
                                    <td class="text-bold-500">@(couponCode.MaxAmount.HasValue ? $"$ {couponCode.MaxAmount.Value}": "No hay limite de compra")</td>
                                </tr>
                            </table>
                        </div>
                    </div>

                    <div class="card ">
                        <div class="card-header">
                            <h4>Expiración</h4>
                        </div>
                        <div class="card-body">
                            <table class='table table-borderless'>
                                <tr>
                                    <td class="text-bold-500">Fecha de Inicio</td>
                                    <td class="text-bold-500">@couponCode.DateStart.ToString("dd/MM/yyyy")</td>
                                </tr>
                                <tr>
                                    <td class="text-bold-500">Fecha de Expiración</td>
                                    <td class="text-bold-500">@(couponCode.DateExpire.HasValue ? couponCode.DateExpire.Value.ToString("dd/MM/yyyy") : "No tiene expiración.")</td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="card ">
                        <div class="card-header">
                            <h4>Veces Usado</h4>
                        </div>
                        <div class="card-body">
                            <div class="text-center mb-5">
                                <h6>Ordenes</h6>
                                <h1 class='text-purple'>8</h1>
                            </div>
                        </div>
                    </div>

                    <div class="card ">
                        <div class="card-header">
                            <h4>Categorias</h4>
                        </div>
                        <div class="card-body">
                            @if (couponCode.Categories is not null && couponCode.Categories.Any())
                            {
                                <div class="badges">
                                    @foreach (var item in couponCode.Categories)
                                    {
                                        <span class="badge bg-warning">@item</span>
                                    }

                                </div>
                            }
                            else
                            {
                                <p class="text-bold-500">No se filtran Categorias.</p>
                            }


                            <div class="d-flex justify-content-end">
                                <button class="btn icon icon-left btn-primary" @onclick="() => modalUpdateCouponCodeCategory.Show()"><i data-feather="edit"></i> Editar</button>
                            </div>
                        </div>
                    </div>

                    <div class="card ">
                        <div class="card-header">
                            <h4>SubCategorias</h4>
                        </div>
                        <div class="card-body">
                            @if (couponCode.SubCategories is not null && couponCode.SubCategories.Any())
                            {
                                <div class="badges">
                                    @foreach (var item in couponCode.SubCategories)
                                    {
                                        <span class="badge bg-warning">@($"{item.Category} - {item.SubCategory}")</span>
                                    }

                                </div>
                            }
                            else
                            {
                                <p class="text-bold-500">No se filtran SubCategorias.</p>
                            }


                            <div class="d-flex justify-content-end">
                                <button class="btn icon icon-left btn-primary" @onclick="() => modalUpdateCouponCodeSubCategory.Show()"><i data-feather="edit"></i> Editar</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="card ">
                        <div class="card-header">
                            <h4>Cantidad de Compras</h4>
                        </div>
                        <div class="card-body">
                            <div class="text-center mb-5">
                                <h6>Total</h6>
                                <h1 class='text-green'>7</h1>
                            </div>
                        </div>
                    </div>
                    <div class="card ">
                        <div class="card-header">
                            <h4>Clientes</h4>
                        </div>
                        <div class="card-body">
                            @if (couponCode.Customers is not null && couponCode.Customers.Any())
                            {
                                <div class="badges">
                                    @foreach (var item in couponCode.Customers)
                                    {
                                        <span class="badge bg-warning">@item</span>
                                    }

                                </div>
                            }
                            else
                            {
                                <p class="text-bold-500">No se filtran Clientes.</p>
                            }


                            <div class="d-flex justify-content-end">
                                <button class="btn icon icon-left btn-primary" @onclick="() => modalUpdateCouponCodeCustomer.Show()"><i data-feather="edit"></i> Editar</button>
                            </div>
                        </div>
                    </div>

                    <div class="card ">
                        <div class="card-header">
                            <h4>Productos</h4>
                        </div>
                        <div class="card-body">
                            @if (couponCode.Products is not null && couponCode.Products.Any() && products is not null)
                            {
                                <div class="badges">
                                    @foreach (var item in products.Where(x => couponCode.Products.Contains(x.Id)).Select(x => x.Name))
                                    {
                                        <span class="badge bg-warning">@item</span>
                                    }

                                </div>
                            }
                            else
                            {
                                <p class="text-bold-500">No se filtran Productos.</p>
                            }


                            <div class="d-flex justify-content-end">
                                <button class="btn icon icon-left btn-primary" @onclick="() => modalUpdateCouponCodeProduct.Show()"><i data-feather="edit"></i> Editar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    }

</div>

<ModalUpdateCouponCodeCategory @ref="modalUpdateCouponCodeCategory" Categories="categories" CouponCode="couponCode" OnCloseCallback="CloseModalOnClick" />
<ModalUpdateCouponCodeCustomer @ref="modalUpdateCouponCodeCustomer" Customers="customers" CouponCode="couponCode" OnCloseCallback="CloseModalOnClick" />
<ModalUpdateCouponCodeProduct @ref="modalUpdateCouponCodeProduct" Products="products" CouponCode="couponCode" OnCloseCallback="CloseModalOnClick" />
<ModalUpdateCouponCodeSubCategory @ref="modalUpdateCouponCodeSubCategory" Categories="categories" CouponCode="couponCode" OnCloseCallback="CloseModalOnClick" />


@code {
    [Parameter]
    public string Code { get; set; }

    CouponCodeDto couponCode;

    IEnumerable<ProductCategoryDto> categories;
    IEnumerable<CustomerDto> customers;
    IEnumerable<ProductDto> products;

    ModalUpdateCouponCodeCategory modalUpdateCouponCodeCategory;
    ModalUpdateCouponCodeCustomer modalUpdateCouponCodeCustomer;
    ModalUpdateCouponCodeProduct modalUpdateCouponCodeProduct;
    ModalUpdateCouponCodeSubCategory modalUpdateCouponCodeSubCategory;

    protected override void OnInitialized()
    {
        UpdateCouponCode();
        UpdateCategories();
        UpdateCustomers();
        UpdateProducts();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return JSRuntime.InvokeVoidAsync("AivenEcommerceAdmin.replaceIcons").AsTask();
    }

    void CloseModalOnClick(MouseEventArgs args)
    {
        UpdateCouponCode();
    }

    private void UpdateCategories()
    {
        ProductCategoryService.GetAllAsync()
            .ContinueWith(x =>
            {
                categories = x.Result.Result;
                StateHasChanged();
            });
    }

    private void UpdateCustomers()
    {
        CustomerService.GetAllAsync()
            .ContinueWith(x =>
            {
                customers = x.Result.Result;
                StateHasChanged();
            });
    }

    private void UpdateCouponCode()
    {
        CouponCodeService.GetCouponCodeAsync(Code).ContinueWith(x =>
        {
            couponCode = x.Result.Result;
            StateHasChanged();
        });
    }

    private void UpdateProducts()
    {
        ProductService.GetAllAsync().ContinueWith(x =>
        {
            products = x.Result.Result.Items;
            StateHasChanged();
        });
    }

}
