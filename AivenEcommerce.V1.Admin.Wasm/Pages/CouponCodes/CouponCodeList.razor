@page "/couponcodes"

@inject IJSRuntime JSRuntime
@inject ICouponCodeService CouponCodeService

@implements IAsyncDisposable

<div class="main-content container-fluid">
    <div class="page-title">
        <div class="row">
            <div class="col-12 col-md-6 order-md-1 order-last">
                <h3>Cupones</h3>
            </div>
            <div class="col-12 col-md-6 order-md-2 order-first">
                <nav aria-label="breadcrumb" class='breadcrumb-header'>
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><NavLink href="/">Dashboard</NavLink></li>
                        <li class="breadcrumb-item active" aria-current="page">Cupones</li>
                    </ol>
                </nav>
            </div>
        </div>
    </div>
    <section class="section">
        <div class="card">
            <div class="card-header">
                <NavLink href="couponcodes/create" class="btn icon btn-secondary"><i data-feather="plus"></i> Crear Nuevo</NavLink>
            </div>
            <div class="card-body">
                <table class='table table-striped' id="table1">
                    <thead>
                        <tr>
                            <th>Código</th>
                            <th>Tipo</th>
                            <th>Valor</th>
                            <th>Productos Permitidos</th>
                            <th>Fecha de Inicio</th>
                            <th>Fecha de Expiración</th>
                            <th>Ver más</th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var item in ListCouponCodes)
                        {
                            <tr>
                                <td><strong>@item.Code</strong></td>
                                @switch (item.Type)
                                {
                                    case CouponCodeOffType.Percentage:
                                        <td>Porcentaje de Descuento</td>
                                        <td>% @item.Value</td>
                                        break;
                                    case CouponCodeOffType.SpecificAmount:
                                        <td>Descuento</td>
                                        <td>$ @item.Value</td>
                                        break;
                                    default:
                                        break;
                                }

                                @{
                                    var filterCount = item.Categories?.Count() ?? 0 +
                                        item.SubCategories?.Count() ?? 0 +
                                        item.Products?.Count() ?? 0 +
                                        item.Customers?.Count() ?? 0;
                                }

                                <td>@(filterCount > 0 ? "Tiene filtros" : "Aplica a Todos")</td>

                                <td>@(item.DateStart.ToString("dd/MM/yyyy"))</td>
                                <td>@(item.DateExpire.HasValue ? item.DateExpire.Value.ToString("dd/MM/yyyy") : "No tiene expiración")</td>
                                <td data-sortable="false">
                                    <NavLink href=@("/couponcodes/" + item.Code) class="btn icon icon-left btn-primary"><i data-feather="edit"></i> Entrar</NavLink>
                                </td>
                            </tr>
                        }


                    </tbody>
                </table>
            </div>
        </div>

    </section>
</div>

@code {

    public List<CouponCodeDto> ListCouponCodes { get; set; } = new List<CouponCodeDto>();

    // Load the module and keep a reference to it
    // You need to use .AsTask() to convert the ValueTask to Task as it may be awaited multiple times
    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", "./assets/js/vendors.js").AsTask();

    async Task Submit()
    {
        var module = await Module;
        await module.InvokeVoidAsync("dataTable");
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
        {
            var module = await _module;
            await module.DisposeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await CouponCodeService.GetCouponCodeAsync();
        if (result.IsSuccess)
        {
            ListCouponCodes.AddRange(result.Result);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await Submit();
            await JSRuntime.InvokeVoidAsync("AivenEcommerceAdmin.replaceIcons").AsTask();
        }
    }
}
