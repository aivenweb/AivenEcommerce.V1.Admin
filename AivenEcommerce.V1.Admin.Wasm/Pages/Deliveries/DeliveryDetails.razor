@page "/orders/{OrderId}/delivery"

@inject ISaleService SaleService
@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime

<div class="main-content container-fluid">
    @if (saleDeliveryDto is not null)
    {
        <div class="page-title">
            <h3> Compra de @saleDeliveryDto.Customer.Name @saleDeliveryDto.Customer.LastName </h3>
        </div>


        <section class="section">
            <div class="row mb-4">
                <div class="col-md-4">
                    <div class="card ">
                        <div class="card-header">
                            <h4>Cliente</h4>
                        </div>
                        <div class="card-body">
                            <div class="row" style="padding-bottom:25px">
                                <div class="col-md-4 text-center">
                                    <div class="avatar avatar-xl"><img src="@saleDeliveryDto.Customer.Picture.ToString()" /></div>
                                </div>
                                <div class="col-md-8 text-center">
                                    @saleDeliveryDto.Customer.Name @saleDeliveryDto.Customer.LastName
                                </div>

                            </div>
                            <div class="col-md-12 text-center">
                                @saleDeliveryDto.Customer.Email
                            </div>
                        </div>
                    </div>
                    <div class="card ">
                        <div class="card-header">
                            <h4>Dirección @("- " + saleDeliveryDto.Address.Type switch
                                        {
                                             AddressType.Work => "Oficina de Trabajo",
                                             AddressType.Home => "Hogar"
                                            
                            })</h4>
                        </div>
                        <div class="card-body">
                            <table class='table table-borderless'>
                                <tr>
                                    <td class="text-bold-500">Calle</td>
                                    <td class="text-bold-500">@(saleDeliveryDto.Address.Street + " " + saleDeliveryDto.Address.Number + " " + saleDeliveryDto.Address.Depatarment)</td>
                                </tr>
                                <tr>
                                    <td class="text-bold-500">Entre Calles</td>
                                    <td class="text-bold-500">@(saleDeliveryDto.Address.BetweenStreet1 + (!string.IsNullOrWhiteSpace(saleDeliveryDto.Address.BetweenStreet1) && !string.IsNullOrWhiteSpace(saleDeliveryDto.Address.BetweenStreet2) ? " Y ": default) + saleDeliveryDto.Address.BetweenStreet2 )</td>
                                </tr>
                                <tr>
                                    <td class="text-bold-500">Contacto</td>
                                    <td class="text-bold-500">@(saleDeliveryDto.Address.Name + " - " + saleDeliveryDto.Address.Phone)</td>
                                </tr>
                                <tr>
                                    <td class="text-bold-500">Ciudad</td>
                                    <td class="text-bold-500">@(saleDeliveryDto.Address.City)</td>
                                </tr>
                                <tr>
                                    <td class="text-bold-500">Código Postal</td>
                                    <td class="text-bold-500">@(saleDeliveryDto.Address.ZipCode)</td>
                                </tr>
                                <tr>
                                    <td class="text-bold-500">Observaciones</td>
                                    <td class="text-bold-500">@(saleDeliveryDto.Address.Observations)</td>
                                </tr>

                            </table>

                        </div>
                    </div>
                    <div class="card ">
                        <div class="card-header">
                            <h4>Información</h4>
                        </div>
                        <div class="card-body">
                            <table class='table table-borderless'>
                                <tr>
                                    <td class="text-bold-500">Fecha Creación</td>
                                    <td class="text-bold-500">@(saleDeliveryDto.Order.CreationDate.ToShortDateString() + " " + saleDeliveryDto.Order.CreationDate.ToLongTimeString() )</td>
                                </tr>
                                <tr>
                                    <td class="text-bold-500">Fecha de Pago</td>
                                    <td class="@("text-bold-500 " + (!saleDeliveryDto.Order.PayDate.HasValue ? "text-red" : string.Empty))">@(saleDeliveryDto.Order.PayDate.HasValue ? saleDeliveryDto.Order.PayDate.Value.ToShortDateString() + " " + saleDeliveryDto.Order.PayDate.Value.ToLongTimeString() : "No se recibió un pago aun.")</td>
                                </tr>
                                <tr>
                                    <td class="text-bold-500">Cupón de Descuento</td>
                                    <td class="@("text-bold-500 " + (string.IsNullOrWhiteSpace(saleDeliveryDto.Sale.CouponCode) ? "text-red" : string.Empty))">@(saleDeliveryDto.Sale.CouponCode ?? "No se utilizo un cupón.")</td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="card ">
                        <div class="card-header">
                            <h4>Estado</h4>
                        </div>
                        <div class="card-body">
                            <div class="text-center mb-5">

                                @if(saleDeliveryDto.Order.PayDate.HasValue)
                                {

                                    @switch (saleDeliveryDto.Delivery.Status)
                                    {
                                        case DeliveryStatus.Delivered:
                                            <h2>Entrgado</h2>
                                            break;
                                        case DeliveryStatus.NoAddressFound:
                                            <h2>No se encontró la dirección</h2>
                                            break;
                                        case DeliveryStatus.ProductIncident:
                                            <h2>Hubó un incidente con el producto</h2>
                                            break;
                                        case DeliveryStatus.IncorrectCode:
                                            <h2>Código incorrecto</h2>
                                            break;
                                        case DeliveryStatus.BuyerNotFound:
                                            <h2>No se pudo conctatar al comprador</h2>
                                            break;
                                        case DeliveryStatus.Created:
                                            <h2>Creada</h2>
                                            break;
                                        case DeliveryStatus.Pending:
                                            <h2>Entrega Pendiente</h2>
                                            break;
                                        case DeliveryStatus.Going:
                                            <h2>En Camino</h2>
                                            break;
                                    }
                                    @switch (saleDeliveryDto.Delivery.Status)
                                    {
                                        case DeliveryStatus.Delivered:
                                            <span class="badge bg-success">Entregado</span>
                                            break;
                                        case DeliveryStatus.NoAddressFound:
                                        case DeliveryStatus.ProductIncident:
                                        case DeliveryStatus.IncorrectCode:
                                        case DeliveryStatus.BuyerNotFound:
                                            <span class="badge bg-danger">Problema</span>
                                            break;
                                        case DeliveryStatus.Created:
                                        case DeliveryStatus.Pending:
                                        case DeliveryStatus.Going:
                                            <span class="badge bg-warning">Pendiente</span>
                                            break;
                                    }

                                }
                                else{
                                    <h2>No Pago</h2>
                                    <span class="badge bg-warning">Pendiente</span>
                                }
                            </div>
                            <div class="d-flex justify-content-end">
                                <button class="btn icon icon-left btn-primary"><i data-feather="edit"></i> Editar</button>
                            </div>
                        </div>
                        
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h4>Mapa</h4>
                        </div>
                        <div class="card-body">
                            <iframe src="@($"https://www.google.com/maps?q={saleDeliveryDto.Address.Street} {saleDeliveryDto.Address.Number} {saleDeliveryDto.Address.City}&z=16&t=&ie=UTF8&output=embed")" width="100%" height="450"></iframe>
                        </div>
                    </div>
                    
                </div>

                <div class="col-md-4">
                    <div class="card ">
                        <div class="card-header">
                            <h4>Total Comprado</h4>
                        </div>
                        <div class="card-body">
                            <div class="text-center mb-5">
                                <h6>Total</h6>
                                <h1 class='text-purple'>+$@(saleDeliveryDto.Order.TotalAmount)</h1>
                            </div>
                            
                            @if(!saleDeliveryDto.Order.PayDate.HasValue)
                            {
                                <div class="d-flex justify-content-end">
                                <button class="btn icon icon-left btn-primary" @onclick="DescuentoOnClick"><i data-feather="dollar-sign"></i> Descuento</button>
                            </div>
                            }

                        </div>
                    </div>
                    <div class="card ">
                        <div class="card-header">
                            <h4>Productos</h4>
                        </div>
                        <div class="card-body">
                            <div class="row" style="padding-bottom:25px">
                                @if (saleDeliveryDto?.Products.Any() ?? false)
                                {
                                    @foreach (var product in saleDeliveryDto.Products.Take(5))
                                    {
                                        <div class="col-md-4 text-center">
                                            <div class="avatar avatar-lg"><NavLink href="@($"products/{product.Id}")"><img src="@product.Thumbnail.ToString()" /></NavLink></div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <h1 class='text-purple'>Vacio</h1>
                                }
                            </div>
                            <div class="d-flex justify-content-end">
                                <button class="btn icon icon-left btn-primary" @onclick="ShowAllProducts"><i data-feather="search"></i> Ver Todos</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <ModalShowSaleProductDefinitives @ref=saleProductDefinitivesModalRef Products="saleDeliveryDto.Products" ProductDefinitives="saleDeliveryDto.SaleDetail.Products" ></ModalShowSaleProductDefinitives>
    }

</div>


@code {
    [Parameter]
    public string OrderId { get; set; }

    SaleDeliveryDto saleDeliveryDto;

    ModalShowSaleProductDefinitives saleProductDefinitivesModalRef;


    protected override async Task OnInitializedAsync()
    {
        var saleDeliveryDtoResult = await SaleService.GetSaleDeliveryAsync(OrderId);
        saleDeliveryDto = saleDeliveryDtoResult.Result;

    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return JSRuntime.InvokeVoidAsync("AivenEcommerceAdmin.replaceIcons").AsTask();
    }


   

    void ShowAllWishList(MouseEventArgs args)
    {
        NavigationManager.NavigateTo($"wishlists/{saleDeliveryDto.Customer.Email}/list");
    }

    Task ShowAllProducts(MouseEventArgs args)
    {
        return saleProductDefinitivesModalRef.Show();
    }

    void DescuentoOnClick(MouseEventArgs args)
    {
        NavigationManager.NavigateTo($"orders/{OrderId}/TotalAmount/edit");
    }

}
