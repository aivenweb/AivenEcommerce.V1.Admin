@page "/orders/{OrderId}/TotalAmount/edit"


@inject IJSRuntime JSRuntime
@inject AlertComponentService AlertService
@inject NavigationManager NavigationManager

@inject IOrderService OrderService

<div class="main-content container-fluid">
    <div class="page-title">
        <div class="row">
            <div class="col-12 col-md-6 order-md-1 order-last">
                <h3>Editar Monto de la Orden</h3>
            </div>
            <div class="col-12 col-md-6 order-md-2 order-first">
                <nav aria-label="breadcrumb" class='breadcrumb-header'>
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><NavLink href="/">Dashboard</NavLink></li>
                        <li class="breadcrumb-item"><NavLink href="@($"/orders/{OrderId}/delivery")">Orden</NavLink></li>
                        <li class="breadcrumb-item active" aria-current="page">Editar</li>
                    </ol>
                </nav>
            </div>
        </div>
    </div>
    <section class="section">
        <div class="row">
            <div class="col-6">
                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title">Editar Orden</h4>
                    </div>
                    <div class="card-content">
                        <div class="card-body">
                            <div class="form form-horizontal">
                                <div class="form-body">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <label>Monto Actual</label>
                                        </div>
                                        <div class="col-md-8">
                                            <div class="form-group has-icon-left">
                                                <div class="position-relative">

                                                    @if(order is not null)
                                                    {
                                                        <input type="text" class="form-control" disabled @bind-value="currentAmount">
                                                    }

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <label>Monto Nuevo</label>
                                        </div>
                                        <div class="col-md-8">
                                            <div class="form-group has-icon-left">
                                                <div class="position-relative">
                                                    <input type="text" class="form-control" placeholder="Nombre" @bind="newAmount" @ref="inputRef">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="col-12 d-flex justify-content-end">
                    <button class="@("btn icon btn-primary mr-1 mb-1 " + ((newAmount >= 0) ? string.Empty : "disabled"))" @onclick="SaveOnClick"><i data-feather="edit"></i> Guardar</button>

                    <NavLink href="@($"/orders/{OrderId}/delivery")" class="btn btn-light-secondary mr-1 mb-1">Cancelar</NavLink>

                </div>
            </div>
        </div>

    </section>
</div>
<YesNoQuestionModal @ref="QuestionModal" Title="Regalar Orden" Question="Si modifica el monto de una orden a $0 estara cambiando el estado de la orden a Pagada. ¿Desea Continuar?" OnYesCallback="SendChange" />

@code {
    [Parameter]
    public string OrderId { get; set; }

    int newAmount = default;
    decimal currentAmount = default;

    OrderDto order;
    ElementReference inputRef;
    YesNoQuestionModal QuestionModal;

    protected override void OnInitialized()
    {
        OrderService.GetAsync(OrderId).ContinueWith(x =>
        {
           order = x.Result.Result;
           currentAmount = order.TotalAmount;
           StateHasChanged();
        });

    }

    async Task SaveOnClick(MouseEventArgs args)
    {
        if(newAmount == 0)
        {
            await QuestionModal.Show();
        }
        else
        {
            await SendChange(args);
        }
    }

    async Task SendChange(MouseEventArgs args)
    {
        var result = await OrderService.UpdateTotalAmountAsync(new(OrderId, newAmount));

        if (result.IsSuccess)
        {
            NavigationManager.NavigateTo($"/orders/{OrderId}/delivery");
        }
        else
        {
            AlertService.Show("Editar Subcategoria", result.Validations.Messages.First().Message, "danger");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await JSRuntime.InvokeVoidAsync("AivenEcommerceAdmin.replaceIcons").AsTask();
        }
        else
        {
            await inputRef.FocusAsync();
        }
    }
}
