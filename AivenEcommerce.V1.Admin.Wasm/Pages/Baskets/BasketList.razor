@page "/baskets/{Email}/list"

@inject IJSRuntime JSRuntime
@inject IBasketService BasketService
@inject ICustomerService CustomerService

@implements IAsyncDisposable

<div class="main-content container-fluid">
    <div class="page-title">
        <div class="row">
            <div class="col-12 col-md-6 order-md-1 order-last">
                @if (customer is null)
                {
                    <h3>Carrito</h3>
                }
                else
                {
                    <h3>Carrito de @customer.Name @customer.LastName </h3>
                }

            </div>
            <div class="col-12 col-md-6 order-md-2 order-first">
                <nav aria-label="breadcrumb" class='breadcrumb-header'>
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><NavLink href="/">Dashboard</NavLink></li>
                        <li class="breadcrumb-item"><NavLink href="@($"/Customers")">Clientes</NavLink></li>
                        <li class="breadcrumb-item"><NavLink href="@($"/Customers/{Email}/details")">@Email</NavLink></li>
                        <li class="breadcrumb-item active" aria-current="page">Carrito</li>
                    </ol>
                </nav>
            </div>
        </div>
    </div>
    <section class="section">
        <div class="card">
            <div class="card-body">
                <table class='table table-striped' id="table1">
                    <thead>
                        <tr>
                            <th data-sortable="false">Imagen</th>
                            <th>Nombre</th>
                            <th>Precio</th>
                            <th>Categoria</th>
                            <th>SubCategoria</th>
                            <th>Activo</th>
                            <th>Ver más</th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var item in ListProducts)
                        {
                            <tr>
                                <td>
                                    @if (item.Thumbnail is not null)
                                    {
                                        <div class="avatar"><img src="@item.Thumbnail.ToString()" /></div>
                                    }
                                </td>
                                <td>@item.Name</td>
                                <td>@( "$" +item.Price)</td>
                                <td>@item.Category</td>
                                <td>@item.SubCategory</td>
                                <td data-sortable="false">
                                    @if (item.IsActive)
                                    {
                                        <span class="badge bg-success">Activo</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">Inactivo</span>
                                    }
                                </td>
                                <td data-sortable="false">
                                    <NavLink href=@("/Products/" + item.Id) class="btn icon icon-left btn-primary"><i data-feather="edit"></i> Entrar</NavLink>
                                </td>
                            </tr>
                        }


                    </tbody>
                </table>
            </div>
        </div>

    </section>
</div>

@code {
    [Parameter]
    public string Email { get; set; }


    public List<ProductDto> ListProducts { get; set; } = new List<ProductDto>();

    CustomerDto customer;

    // Load the module and keep a reference to it
    // You need to use .AsTask() to convert the ValueTask to Task as it may be awaited multiple times
    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", "./assets/js/vendors.js").AsTask();

    async Task Submit()
    {
        var module = await Module;
        await module.InvokeVoidAsync("dataTable");
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
        {
            var module = await _module;
            await module.DisposeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(Email))
        {
            var resultCustomer = await CustomerService.GetAsync(Email);
            if (resultCustomer.IsSuccess)
            {
                customer = resultCustomer.Result;
            }

            var resultWishList = await BasketService.GetBasketProductsAsync(Email);
            if (resultWishList.IsSuccess)
            {
                ListProducts.AddRange(resultWishList.Result.Products);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await Submit();
            await JSRuntime.InvokeVoidAsync("AivenEcommerceAdmin.replaceIcons").AsTask();
        }
    }
}
