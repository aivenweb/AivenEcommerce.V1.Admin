@inject IJSRuntime JSRuntime
@inject AlertComponentService AlertService
@inject IProductService ProductService
@inject IProductBadgeService ProductBadgeService


<div class="modal fade" id="updateProductBadge" backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="updateProductBadgeTitle" aria-hidden="true" data->
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateProductBadgeTitle">Editar Carteles</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="OnCloseCallback">
                    <i data-feather="x"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="form form-horizontal">
                    <div class="form-body">
                        <div class="row">
                            <div class="col-md-4">
                                <label>Descuento</label>
                            </div>
                            <div class="col-md-8">
                                <div class="form-group has-icon-left">
                                    <div class="position-relative">
                                        <input type="number" class="form-control" placeholder="Stock" @bind="percentageOff" max="100" min="0">
                                        <div class="form-control-icon">
                                            <i data-feather="percent"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label>Etiquetas</label>
                            </div>
                            <div class="col-md-8">
                                <div class="buttons">
                                    <ul class="list-group">
                                        <li class="list-group-item">
                                            <input class="form-check-input mr-1" type="checkbox" @onchange="eventArgs => { CheckboxClicked(ProductBadgeName.BestSeller, eventArgs.Value); }">
                                            <span class="badge bg-danger">Más Vendido</span>
                                        </li>
                                        <li class="list-group-item">
                                            <input class="form-check-input mr-1" type="checkbox" @onchange="eventArgs => { CheckboxClicked(ProductBadgeName.InOffer, eventArgs.Value); }">
                                            <span class="badge bg-warning">En Oferta</span>
                                        </li>
                                        <li class="list-group-item">
                                            <input class="form-check-input mr-1" type="checkbox"  @onchange="eventArgs => { CheckboxClicked(ProductBadgeName.New, eventArgs.Value); }">
                                            <span class="badge bg-success">Nuevo</span>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light-secondary" data-dismiss="modal" @onclick="OnCloseCallback">
                    <i class="bx bx-x d-block d-sm-none"></i>
                    <span class="d-none d-sm-block">Cancelar</span>
                </button>
                <button type="button" class="btn btn-primary ml-1" data-dismiss="modal" @onclick="Save">
                    <i class="bx bx-check d-block d-sm-none"></i>
                    <span class="d-none d-sm-block">Guardar</span>
                </button>
            </div>
        </div>
    </div>
</div>

@code{

    [Parameter]
    public ProductDto Product { get; set; }

    [Parameter]
    public IEnumerable<ProductBadgeName> ProductBadges { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnCloseCallback { get; set; }

    short percentageOff = 0;
    List<ProductBadgeName> badgeNames = new List<ProductBadgeName>();

    protected override void OnInitialized()
    {
        percentageOff = Product.PercentageOff;
    }


    async Task Save(MouseEventArgs args)
    {
        var result = await ProductService.UpdateBadgeAsync(new(Product.Id, percentageOff, badgeNames));

        if (result.IsSuccess)
        {
            await JSRuntime.InvokeVoidAsync("AivenEcommerceAdmin.hideModal", "updateProductBadge").AsTask();
            if (OnCloseCallback.HasDelegate)
                await OnCloseCallback.InvokeAsync();
        }
        else
        {
            AlertService.Show("Activar Producto", result.Validations.Messages.First().Message, "danger");
        }
    }

    public async Task Show()
    {
        await JSRuntime.InvokeVoidAsync("AivenEcommerceAdmin.showModal", "updateProductBadge").AsTask();
        percentageOff = Product.PercentageOff;
    }

    void CheckboxClicked(ProductBadgeName badge, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            badgeNames.Add(badge);
        }
        else
        {
            badgeNames.Remove(badge);
        }
    }
}