@inject IJSRuntime JSRuntime
@inject IApiOptions ApiOptions
@inject ISaleService SaleService

<div class="modal fade" id="changeStatusSaleDeliveryModal" backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="changeStatusSaleDeliveryModalTitle" aria-hidden="true" data->
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="changeStatusSaleDeliveryModalTitle">Cambiar Estado de Venta</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="OnCloseCallback">
                    <i data-feather="x"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="form form-horizontal">
                    <div class="form-body">
                        <div class="row">
                            <div class="col-md-4">
                                <label>Estado Actual: @CurrentStatus()</label>
                            </div>
                            <div class="col-md-8">
                                <div class="form-group">
                                    <div class="position-relative">

                                        <select class="choices form-select" id="product-edit-category" @onchange=StatusChange>

                                            <option value="1">Pagado</option>
                                            <option value="2">Entregado</option>
                                            <option value="3">Devuelto</option>
                                            <option value="13">Yendo</option>
                                            <option value="14">No se encontro la calle</option>
                                            <option value="15">Hubo un incidente con el producto</option>
                                            <option value="16">Numero de calle incorrecto</option>
                                            <option value="17">No se encontro al comprador</option>


                                        </select>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary ml-1" data-dismiss="modal" @onclick="SaveOnClick">
                    <i class="bx bx-check d-block d-sm-none"></i>
                    <span class="d-none d-sm-block">Aceptar</span>
                </button>
            </div>
        </div>
    </div>
</div>

@code{
    [Parameter]
    public SaleStatus SaleStatus { get; set; }

    [Parameter]
    public DeliveryStatus DeliveryStatus { get; set; }

    [Parameter]
    public string SaleId { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnCloseCallback { get; set; }

    SaleStatus saleStatusNew = default;
    DeliveryStatus deliveryStatusNew = default;
    int statusValue = default;

    public async Task Show()
    {
        await JSRuntime.InvokeVoidAsync("AivenEcommerceAdmin.showModal", "changeStatusSaleDeliveryModal");
        await JSRuntime.InvokeVoidAsync("AivenEcommerceAdmin.createChoice", "select#product-edit-category");
        saleStatusNew = SaleStatus;
        deliveryStatusNew = DeliveryStatus;
    }


    async Task SaveOnClick(MouseEventArgs args)
    {
        switch (statusValue)
        {
            case int value when value == 1:
                saleStatusNew = (SaleStatus)value;
                deliveryStatusNew = DeliveryStatus.Pending;
                break;
            case int value when value == 2 || value == 3:
                saleStatusNew = (SaleStatus)value;
                deliveryStatusNew = DeliveryStatus.Delivered;
                break;
            case int value when value > 10:
                deliveryStatusNew = (DeliveryStatus)(value - 10);
                saleStatusNew = SaleStatus.Payed;
                break;
        }

        await SaleService.UpdateSaleDaliveryStatusAsync(new(SaleId, saleStatusNew, deliveryStatusNew));

        if (OnCloseCallback.HasDelegate)
            await OnCloseCallback.InvokeAsync(args);
    }

    void StatusChange(ChangeEventArgs e)
    {
        statusValue = int.Parse(e.Value.ToString());
    }

    string CurrentStatus()
    {
        if (SaleStatus != SaleStatus.Payed)
        {
            return SaleStatus switch
            {
                SaleStatus.Delivered => "Entregado",
                SaleStatus.PendingPayment => "Pago Pendiente",
                SaleStatus.Returned => "Devuelto"
            };
        }
        else
        {
            return DeliveryStatus switch
            {
                DeliveryStatus.Pending => "Entrega Pendiente",
                DeliveryStatus.BuyerNotFound => "No se encontro al comprador",
                DeliveryStatus.Going => "Yendo",
                DeliveryStatus.NoAddressFound => "No se encontro la calle",
                DeliveryStatus.ProductIncident => "Hubo un incidente con el producto",
                DeliveryStatus.IncorrectCode => "Numero de calle incorrecto",
            };
        }
    }
}