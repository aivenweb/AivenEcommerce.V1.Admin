@inject IJSRuntime JSRuntime
@inject AlertComponentService AlertService
@inject ICouponCodeService CouponCodeService

<div class="modal fade" id="updateCouponCodeCustomer" backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="updateCouponCodeCustomerTitle" aria-hidden="true" data->
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateCouponCodeCustomerTitle">Editar Clientes</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <i data-feather="x"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="form form-horizontal">
                    <div class="form-body">
                        <div class="row">
                            <div class="col-md-4">
                                <label>Clientes</label>
                            </div>
                            <div class="col-md-8">
                                <div class="form-group">

                                    <select id="choices-couponcode-customers-update" class="choices form-select select-light-danger" multiple="multiple">
                                        @if (Customers is not null && CouponCode is not null)
                                        {
                                            @foreach (var item in Customers)
                                            {
                                                <option value="@item.Email" selected="@(CouponCode.Customers?.Contains(@item.Email) ?? false)">@item.Email</option>
                                            }
                                        }
                                    </select>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light-secondary" data-dismiss="modal" @onclick="Close">
                    <i class="bx bx-x d-block d-sm-none"></i>
                    <span class="d-none d-sm-block">Cancelar</span>
                </button>
                <button type="button" class="btn btn-primary ml-1" data-dismiss="modal" @onclick="Save">
                    <i class="bx bx-check d-block d-sm-none"></i>
                    <span class="d-none d-sm-block">Guardar</span>
                </button>
            </div>
        </div>
    </div>
</div>

@code{

    [Parameter]
    public CouponCodeDto CouponCode { get; set; }

    [Parameter]
    public IEnumerable<CustomerDto> Customers { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnCloseCallback { get; set; }


    List<string> NewCustomers = new List<string>();


    async Task Save(MouseEventArgs args)
    {
        string[] variantNames = await GetChoiceValues();

        var result = await CouponCodeService.UpdateCouponCodeAsync(new(CouponCode.Id, CouponCode.Code, CouponCode.Type, CouponCode.Value, CouponCode.MinAmount, CouponCode.MaxAmount, CouponCode.Categories, CouponCode.SubCategories, CouponCode.Products, NewCustomers, CouponCode.DateStart, CouponCode.DateExpire));

        if (result.IsSuccess)
        {
            await JSRuntime.InvokeVoidAsync("AivenEcommerceAdmin.hideModal", "updateCouponCodeCustomer").AsTask();
            if (OnCloseCallback.HasDelegate)
                await OnCloseCallback.InvokeAsync();
        }
        else
        {
            AlertService.Show("Editar Cupón", result.Validations.Messages.First().Message, "danger");
        }
    }

    async Task Close(MouseEventArgs args)
    {
        await JSRuntime.InvokeVoidAsync("AivenEcommerceAdmin.clearChoice", "#choices-couponcode-customers-update");

        if (OnCloseCallback.HasDelegate)
            await OnCloseCallback.InvokeAsync();
    }

    public async Task Show()
    {
        NewCustomers = CouponCode.Customers?.ToList() ?? new();
        var dotNetObjRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("AivenEcommerceAdmin.showModal", "updateCouponCodeCustomer");
        await JSRuntime.InvokeVoidAsync("AivenEcommerceAdmin.createChoiceCouponCodeCustomerInput", "#choices-couponcode-customers-update", dotNetObjRef);
        StateHasChanged();
    }

    Task<string[]> GetChoiceValues()
    {
        return JSRuntime.InvokeAsync<string[]>("AivenEcommerceAdmin.getValueChoice", "#choices-couponcode-customers-update").AsTask();
    }

    Task SetChoiceValues(string[] items)
    {
        return JSRuntime.InvokeVoidAsync("AivenEcommerceAdmin.setValueChoice", items).AsTask();
    }

    [JSInvokable]
    public void AddItem(string newItem)
    {
        if (!NewCustomers.Contains(newItem))
        {
            NewCustomers.Add(newItem);
        }

        StateHasChanged();
    }

    [JSInvokable]
    public void RemoveItem(string newItem)
    {
        NewCustomers = NewCustomers.Where(x => x != newItem).ToList();
        StateHasChanged();
    }
}
